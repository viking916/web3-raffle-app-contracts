{
  "address": "0xCa4F5A9E18DDE3806897aC05b07D7399fc870976",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callBackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_FailedToTranferWinningAmountToWinner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreAmountToEnterRaffle",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callBackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfedc3071d85bd06276d11673c85aa4cd1a2c255c2c3606b22699fc1a7e60cac9",
  "receipt": {
    "to": null,
    "from": "0x0D1a3049df26801A598a773d3B3735085dEb9dd0",
    "contractAddress": "0xCa4F5A9E18DDE3806897aC05b07D7399fc870976",
    "transactionIndex": 27,
    "gasUsed": "1308487",
    "logsBloom": "0x
    "blockHash": "0x316e1c48d9402285101a4575e72dae43a340435be9c73d64df8c7ed2a2c4c08c",
    "transactionHash": "0xfedc3071d85bd06276d11673c85aa4cd1a2c255c2c3606b22699fc1a7e60cac9",
    "logs": [],
    "blockNumber": 10641863,
    "cumulativeGasUsed": "3960238",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "300",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "3807",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "14e43aa7f9eaafcc2d18200b2ae86df3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callBackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_FailedToTranferWinningAmountToWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreAmountToEnterRaffle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callBackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2 {\\r\\n\\r\\n    //Variables that start with i_ are immutablesa. Immutables and constants are cheap.\\r\\n    //Variables that start with s_ are storage variable, Storage variables are expensive.\\r\\n    //Private variables are cheaper compared to public variables\\r\\n\\r\\n    //Immutables\\r\\n    uint256 public immutable i_entranceFee;\\r\\n    uint256 public immutable i_interval;\\r\\n    bytes32 public immutable i_gasLane;\\r\\n    uint64 public immutable i_subscriptionId;\\r\\n    uint32 public immutable i_callBackGasLimit;\\r\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\r\\n\\r\\n    //Constants\\r\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 public constant NUM_WORDS = 1;\\r\\n    \\r\\n    //Errors\\r\\n    error Raffle__SendMoreAmountToEnterRaffle();\\r\\n    error Raffle_RaffleNotOpen();\\r\\n    error Raffle_UpkeepNotNeeded();\\r\\n    error Raffle_FailedToTranferWinningAmountToWinner();\\r\\n    \\r\\n    //Enum\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        PICKING_WINNER\\r\\n    }\\r\\n    RaffleState public s_raffleState;\\r\\n\\r\\n    //Array\\r\\n    address payable[] public s_players;\\r\\n\\r\\n\\r\\n    uint256 public s_lastTimeStamp;\\r\\n    address public s_recentWinner;\\r\\n\\r\\n    //Events\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    //Double contructor due to VRFConsumerBaseV2\\r\\n    constructor(\\r\\n        uint256 _entranceFee, \\r\\n        uint256 _interval, \\r\\n        address _vrfCoordinatorV2,\\r\\n        bytes32 _gasLane,\\r\\n        uint64 _subscriptionId,\\r\\n        uint32 _callBackGasLimit\\r\\n        ) VRFConsumerBaseV2(_vrfCoordinatorV2) {\\r\\n        i_entranceFee = _entranceFee;\\r\\n        i_interval = _interval;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\\r\\n        i_gasLane = _gasLane; //keyhas for VRF\\r\\n        i_subscriptionId = _subscriptionId;\\r\\n        i_callBackGasLimit = _callBackGasLimit;\\r\\n\\r\\n    }\\r\\n\\r\\n    function enterRaffle() external payable{\\r\\n        //require check function call is expensive than handling and storing error messages onchain manually.\\r\\n        //require(msg.value >= i_entranceFee,\\\"Not enough amount to participate.\\\");\\r\\n        //Check if user is trying to enter Raffle with required amount or not.\\r\\n        if(msg.value < i_entranceFee){\\r\\n            revert Raffle__SendMoreAmountToEnterRaffle();\\r\\n        }\\r\\n\\r\\n        //Check Raffle state.\\r\\n        if(s_raffleState != RaffleState.OPEN ){\\r\\n            revert Raffle_RaffleNotOpen();\\r\\n        }\\r\\n\\r\\n        //Enter user into Raffle\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n    // We want winner to be picked automatically. ChainLink keepers can be used to pick winners automatically,\\r\\n    // Will need two functions for chainlink keepers to work 1. CheckUpKeep 2. PerformUpKeep\\r\\n\\r\\n    // We want a real random winner\\r\\n\\r\\n    // 1.We want this function to be true after some time interval\\r\\n    // 2.Lottery should be open\\r\\n    // 3.Contract has ETH\\r\\n    // 4.Keepers has LINK \\r\\n    function checkUpKeep(bytes memory  /* checkData */) public view returns (bool upkeepNeeded, bytes memory /* performData*/) {\\r\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) >  i_interval);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData*/\\r\\n    ) external{\\r\\n        (bool upkeepNeeded,) = checkUpKeep(\\\"\\\");\\r\\n        if(!upkeepNeeded){\\r\\n            revert Raffle_UpkeepNotNeeded();\\r\\n        }\\r\\n        s_raffleState = RaffleState.PICKING_WINNER;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callBackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId*/,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override{\\r\\n        uint256 indexOfWinner = randomWords[0]% s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_players = new address payable[](0);\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if(!success){\\r\\n            revert Raffle_FailedToTranferWinningAmountToWinner();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48a71dced49df843bf62529a9b3e95800304408d7d40d948278a73ae7fb30307\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019d3380380620019d383398181016040528101906200003891906200017f565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508460c08181525050426002819055508373ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508063ffffffff166101208163ffffffff1660e01b815250505050505050506200030e565b6000815190506200011d816200028c565b92915050565b6000815190506200013481620002a6565b92915050565b6000815190506200014b81620002c0565b92915050565b6000815190506200016281620002da565b92915050565b6000815190506200017981620002f4565b92915050565b60008060008060008060c087890312156200019f576200019e62000287565b5b6000620001af89828a016200013a565b9650506020620001c289828a016200013a565b9550506040620001d589828a016200010c565b9450506060620001e889828a0162000123565b9350506080620001fb89828a0162000168565b92505060a06200020e89828a0162000151565b9150509295509295509295565b6000620002288262000239565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b62000297816200021b565b8114620002a357600080fd5b50565b620002b1816200022f565b8114620002bd57600080fd5b50565b620002cb8162000259565b8114620002d757600080fd5b50565b620002e58162000263565b8114620002f157600080fd5b50565b620002ff8162000273565b81146200030b57600080fd5b50565b60805160601c60a05160c05160e0516101005160c01c6101205160e01c6101405160601c61162d620003a66000396000818161068101526109b10152600081816105dd01526107010152600081816106de01526107cb0152600081816106bd015261094e01526000818161082f01526108db01526000818161046a01526109040152600081816103aa01526103fe015261162d6000f3fe6080604052600436106100f35760003560e01c80636919207d1161008a5780638e879c8a116100595780638e879c8a146102ea578063ae771f6b14610315578063aebc455014610352578063cc45483f1461037d576100f3565b80636919207d1461023e57806372cf6e34146102695780637ea3e6c1146102945780638638b0c6146102bf576100f3565b80634585e33b116100c65780634585e33b14610181578063470cdf97146101aa5780635e6c102e146101d557806367f082b014610213576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b57806340f1e76314610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610f3b565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d91906111ec565b60405180910390f35b34801561016257600080fd5b5061016b6105db565b6040516101789190611207565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a39190610e4b565b6105ff565b005b3480156101b657600080fd5b506101bf6107c9565b6040516101cc9190611222565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610e98565b6107ed565b60405161020a9291906110fd565b60405180910390f35b34801561021f57600080fd5b506102286108d4565b60405161023591906111d1565b60405180910390f35b34801561024a57600080fd5b506102536108d9565b60405161026091906111ec565b60405180910390f35b34801561027557600080fd5b5061027e6108fd565b60405161028b9190611207565b60405180910390f35b3480156102a057600080fd5b506102a9610902565b6040516102b691906111ec565b60405180910390f35b3480156102cb57600080fd5b506102d4610926565b6040516102e1919061109e565b60405180910390f35b3480156102f657600080fd5b506102ff61094c565b60405161030c919061112d565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610ee1565b610970565b60405161034991906110b9565b60405180910390f35b34801561035e57600080fd5b506103676109af565b604051610374919061119b565b60405180910390f35b34801561038957600080fd5b506103926109d3565b60405161039f91906111b6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104519291906110d4565b60405180910390fd5b61046482826109e4565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517fc5e363c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d561150d565b5b60008054906101000a900460ff1660018111156104f6576104f561150d565b5b1461052d576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610619604051806020016040528060008152506107ed565b50905080610653576040517f4f6ddb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360018111156106785761067761150d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610742959493929190611148565b602060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610f0e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff1660018111156108145761081361150d565b5b600060018111156108285761082761150d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261085c91906112e6565b1190506000804711905060008060018054905011905082801561087c5750835b80156108855750815b801561088e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061098057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600060018054905082600081518110610a00576109ff61153c565b5b6020026020010151610a12919061147e565b9050600060018281548110610a2a57610a2961153c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ab357610ab261156b565b5b604051908082528060200260200182016040528015610ae15781602001602082028036833780820191505090505b5060019080519060200190610af7929190610c16565b5060008060006101000a81548160ff02191690836001811115610b1d57610b1c61150d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b4f90611089565b60006040518083038185875af1925050503d8060008114610b8c576040519150601f19603f3d011682016040523d82523d6000602084013e610b91565b606091505b5050905080610bcc576040517f0d0315f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c8f579160200282015b82811115610c8e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c36565b5b509050610c9c9190610ca0565b5090565b5b80821115610cb9576000816000905550600101610ca1565b5090565b6000610cd0610ccb84611262565b61123d565b90508083825260208201905082856020860282011115610cf357610cf26115a4565b5b60005b85811015610d235781610d098882610e21565b845260208401935060208301925050600181019050610cf6565b5050509392505050565b6000610d40610d3b8461128e565b61123d565b905082815260208101848484011115610d5c57610d5b6115a9565b5b610d6784828561140b565b509392505050565b600082601f830112610d8457610d8361159f565b5b8135610d94848260208601610cbd565b91505092915050565b60008083601f840112610db357610db261159f565b5b8235905067ffffffffffffffff811115610dd057610dcf61159a565b5b602083019150836001820283011115610dec57610deb6115a4565b5b9250929050565b600082601f830112610e0857610e0761159f565b5b8135610e18848260208601610d2d565b91505092915050565b600081359050610e30816115e0565b92915050565b600081519050610e45816115e0565b92915050565b60008060208385031215610e6257610e616115b3565b5b600083013567ffffffffffffffff811115610e8057610e7f6115ae565b5b610e8c85828601610d9d565b92509250509250929050565b600060208284031215610eae57610ead6115b3565b5b600082013567ffffffffffffffff811115610ecc57610ecb6115ae565b5b610ed884828501610df3565b91505092915050565b600060208284031215610ef757610ef66115b3565b5b6000610f0584828501610e21565b91505092915050565b600060208284031215610f2457610f236115b3565b5b6000610f3284828501610e36565b91505092915050565b60008060408385031215610f5257610f516115b3565b5b6000610f6085828601610e21565b925050602083013567ffffffffffffffff811115610f8157610f806115ae565b5b610f8d85828601610d6f565b9150509250929050565b610fa08161132c565b82525050565b610faf8161131a565b82525050565b610fbe8161133e565b82525050565b610fcd8161134a565b82525050565b6000610fde826112bf565b610fe881856112ca565b9350610ff881856020860161141a565b611001816115b8565b840191505092915050565b611015816113c3565b82525050565b611024816113d5565b82525050565b60006110376000836112db565b9150611042826115c9565b600082019050919050565b61105681611367565b82525050565b61106581611395565b82525050565b6110748161139f565b82525050565b611083816113af565b82525050565b60006110948261102a565b9150819050919050565b60006020820190506110b36000830184610fa6565b92915050565b60006020820190506110ce6000830184610f97565b92915050565b60006040820190506110e96000830185610fa6565b6110f66020830184610fa6565b9392505050565b60006040820190506111126000830185610fb5565b81810360208301526111248184610fd3565b90509392505050565b60006020820190506111426000830184610fc4565b92915050565b600060a08201905061115d6000830188610fc4565b61116a602083018761107a565b611177604083018661104d565b611184606083018561106b565b611191608083018461106b565b9695505050505050565b60006020820190506111b0600083018461100c565b92915050565b60006020820190506111cb600083018461101b565b92915050565b60006020820190506111e6600083018461104d565b92915050565b6000602082019050611201600083018461105c565b92915050565b600060208201905061121c600083018461106b565b92915050565b6000602082019050611237600083018461107a565b92915050565b6000611247611258565b9050611253828261144d565b919050565b6000604051905090565b600067ffffffffffffffff82111561127d5761127c61156b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112a9576112a861156b565b5b6112b2826115b8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f182611395565b91506112fc83611395565b92508282101561130f5761130e6114af565b5b828203905092915050565b600061132582611375565b9050919050565b600061133782611375565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611362826115cc565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113ce826113e7565b9050919050565b60006113e082611354565b9050919050565b60006113f2826113f9565b9050919050565b600061140482611375565b9050919050565b82818337600083830152505050565b60005b8381101561143857808201518184015260208101905061141d565b83811115611447576000848401525b50505050565b611456826115b8565b810181811067ffffffffffffffff821117156114755761147461156b565b5b80604052505050565b600061148982611395565b915061149483611395565b9250826114a4576114a36114de565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115dd576115dc61150d565b5b50565b6115e981611395565b81146115f457600080fd5b5056fea26469706673582212207711e260b6805b51d13856e1d354ee1fb0087b606ffe1d7ccf3b61bc4122606d64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80636919207d1161008a5780638e879c8a116100595780638e879c8a146102ea578063ae771f6b14610315578063aebc455014610352578063cc45483f1461037d576100f3565b80636919207d1461023e57806372cf6e34146102695780637ea3e6c1146102945780638638b0c6146102bf576100f3565b80634585e33b116100c65780634585e33b14610181578063470cdf97146101aa5780635e6c102e146101d557806367f082b014610213576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b57806340f1e76314610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610f3b565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d91906111ec565b60405180910390f35b34801561016257600080fd5b5061016b6105db565b6040516101789190611207565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a39190610e4b565b6105ff565b005b3480156101b657600080fd5b506101bf6107c9565b6040516101cc9190611222565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610e98565b6107ed565b60405161020a9291906110fd565b60405180910390f35b34801561021f57600080fd5b506102286108d4565b60405161023591906111d1565b60405180910390f35b34801561024a57600080fd5b506102536108d9565b60405161026091906111ec565b60405180910390f35b34801561027557600080fd5b5061027e6108fd565b60405161028b9190611207565b60405180910390f35b3480156102a057600080fd5b506102a9610902565b6040516102b691906111ec565b60405180910390f35b3480156102cb57600080fd5b506102d4610926565b6040516102e1919061109e565b60405180910390f35b3480156102f657600080fd5b506102ff61094c565b60405161030c919061112d565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190610ee1565b610970565b60405161034991906110b9565b60405180910390f35b34801561035e57600080fd5b506103676109af565b604051610374919061119b565b60405180910390f35b34801561038957600080fd5b506103926109d3565b60405161039f91906111b6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104519291906110d4565b60405180910390fd5b61046482826109e4565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517fc5e363c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d561150d565b5b60008054906101000a900460ff1660018111156104f6576104f561150d565b5b1461052d576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610619604051806020016040528060008152506107ed565b50905080610653576040517f4f6ddb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360018111156106785761067761150d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610742959493929190611148565b602060405180830381600087803b15801561075c57600080fd5b505af1158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190610f0e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff1660018111156108145761081361150d565b5b600060018111156108285761082761150d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261085c91906112e6565b1190506000804711905060008060018054905011905082801561087c5750835b80156108855750815b801561088e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061098057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600060018054905082600081518110610a00576109ff61153c565b5b6020026020010151610a12919061147e565b9050600060018281548110610a2a57610a2961153c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ab357610ab261156b565b5b604051908082528060200260200182016040528015610ae15781602001602082028036833780820191505090505b5060019080519060200190610af7929190610c16565b5060008060006101000a81548160ff02191690836001811115610b1d57610b1c61150d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b4f90611089565b60006040518083038185875af1925050503d8060008114610b8c576040519150601f19603f3d011682016040523d82523d6000602084013e610b91565b606091505b5050905080610bcc576040517f0d0315f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c8f579160200282015b82811115610c8e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c36565b5b509050610c9c9190610ca0565b5090565b5b80821115610cb9576000816000905550600101610ca1565b5090565b6000610cd0610ccb84611262565b61123d565b90508083825260208201905082856020860282011115610cf357610cf26115a4565b5b60005b85811015610d235781610d098882610e21565b845260208401935060208301925050600181019050610cf6565b5050509392505050565b6000610d40610d3b8461128e565b61123d565b905082815260208101848484011115610d5c57610d5b6115a9565b5b610d6784828561140b565b509392505050565b600082601f830112610d8457610d8361159f565b5b8135610d94848260208601610cbd565b91505092915050565b60008083601f840112610db357610db261159f565b5b8235905067ffffffffffffffff811115610dd057610dcf61159a565b5b602083019150836001820283011115610dec57610deb6115a4565b5b9250929050565b600082601f830112610e0857610e0761159f565b5b8135610e18848260208601610d2d565b91505092915050565b600081359050610e30816115e0565b92915050565b600081519050610e45816115e0565b92915050565b60008060208385031215610e6257610e616115b3565b5b600083013567ffffffffffffffff811115610e8057610e7f6115ae565b5b610e8c85828601610d9d565b92509250509250929050565b600060208284031215610eae57610ead6115b3565b5b600082013567ffffffffffffffff811115610ecc57610ecb6115ae565b5b610ed884828501610df3565b91505092915050565b600060208284031215610ef757610ef66115b3565b5b6000610f0584828501610e21565b91505092915050565b600060208284031215610f2457610f236115b3565b5b6000610f3284828501610e36565b91505092915050565b60008060408385031215610f5257610f516115b3565b5b6000610f6085828601610e21565b925050602083013567ffffffffffffffff811115610f8157610f806115ae565b5b610f8d85828601610d6f565b9150509250929050565b610fa08161132c565b82525050565b610faf8161131a565b82525050565b610fbe8161133e565b82525050565b610fcd8161134a565b82525050565b6000610fde826112bf565b610fe881856112ca565b9350610ff881856020860161141a565b611001816115b8565b840191505092915050565b611015816113c3565b82525050565b611024816113d5565b82525050565b60006110376000836112db565b9150611042826115c9565b600082019050919050565b61105681611367565b82525050565b61106581611395565b82525050565b6110748161139f565b82525050565b611083816113af565b82525050565b60006110948261102a565b9150819050919050565b60006020820190506110b36000830184610fa6565b92915050565b60006020820190506110ce6000830184610f97565b92915050565b60006040820190506110e96000830185610fa6565b6110f66020830184610fa6565b9392505050565b60006040820190506111126000830185610fb5565b81810360208301526111248184610fd3565b90509392505050565b60006020820190506111426000830184610fc4565b92915050565b600060a08201905061115d6000830188610fc4565b61116a602083018761107a565b611177604083018661104d565b611184606083018561106b565b611191608083018461106b565b9695505050505050565b60006020820190506111b0600083018461100c565b92915050565b60006020820190506111cb600083018461101b565b92915050565b60006020820190506111e6600083018461104d565b92915050565b6000602082019050611201600083018461105c565b92915050565b600060208201905061121c600083018461106b565b92915050565b6000602082019050611237600083018461107a565b92915050565b6000611247611258565b9050611253828261144d565b919050565b6000604051905090565b600067ffffffffffffffff82111561127d5761127c61156b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112a9576112a861156b565b5b6112b2826115b8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112f182611395565b91506112fc83611395565b92508282101561130f5761130e6114af565b5b828203905092915050565b600061132582611375565b9050919050565b600061133782611375565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611362826115cc565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113ce826113e7565b9050919050565b60006113e082611354565b9050919050565b60006113f2826113f9565b9050919050565b600061140482611375565b9050919050565b82818337600083830152505050565b60005b8381101561143857808201518184015260208101905061141d565b83811115611447576000848401525b50505050565b611456826115b8565b810181811067ffffffffffffffff821117156114755761147461156b565b5b80604052505050565b600061148982611395565b915061149483611395565b9250826114a4576114a36114de565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115dd576115dc61150d565b5b50565b6115e981611395565b81146115f457600080fd5b5056fea26469706673582212207711e260b6805b51d13856e1d354ee1fb0087b606ffe1d7ccf3b61bc4122606d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)182"
      },
      {
        "astId": 188,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 190,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 192,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)182": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}